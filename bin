#!/usr/bin/env node

"use strict";

var fs = require("fs");
var path = require("path");

var program = require("commander");
var getRemainingArgs = require("commander-remaining-args");
var spawn = require("cross-spawn");
var dotenv = require("dotenv");
var whichPMRuns = require("which-pm-runs");

var packageJson = require("./package.json");

var nodeEnv = "development";

program
  .allowUnknownOption()
  .option("-e, --env-file <path>", "specify path to .env file")
  .version(packageJson.version)
  .description(packageJson.description)
  .parse(process.argv);

var envFile = program.envFile;
if (envFile) {
  var envPath = path.isAbsolute(envFile)
    ? envFile
    : path.resolve(process.cwd(), envFile);
  var envBuffer = fs.readFileSync(envPath);
  var envConfig = dotenv.parse(envBuffer);
  if (envConfig.NODE_ENV) {
    nodeEnv = envConfig.NODE_ENV;
  }
}

var NODE_ENV = process.env.NODE_ENV || nodeEnv;

var env = Object.assign({}, { NODE_ENV: NODE_ENV }, process.env);

var pm = whichPMRuns();
var packageManager = pm && pm.name ? pm.name : env.npm_execpath;
var command = packageManager || "npm";

var script = [
  packageManager ? env.npm_lifecycle_event : "haha",
  env.NODE_ENV
].join(":");

var args = ["run", script].concat(getRemainingArgs(program));

var options = { env: env, stdio: "inherit" };

var result = spawn.sync(command, args, options);

process.exit(result.status);
