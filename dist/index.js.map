{"version":3,"file":"index.js","sources":["../src/package-json.ts","../src/package-manager.ts","../src/node-env.ts","../src/process-env.ts","../src/program.ts","../src/remaining-argv.ts","../src/run-script.ts","../src/index.ts"],"sourcesContent":["import readPkgUp from 'read-pkg-up';\n\nexport const getPackageJson = ({ processCwd }: { processCwd: string }) => {\n  const packageJson = readPkgUp.sync({ cwd: processCwd });\n\n  if (packageJson) {\n    return packageJson.package;\n  }\n\n  return undefined;\n};\n","import preferredPM from 'preferred-pm';\nimport whichPMRuns from 'which-pm-runs';\n\nimport { getPackageJson } from './package-json';\n\nconst getPackageManagerFromPackageJson = ({\n  processCwd,\n}: {\n  processCwd: string;\n}) => {\n  const packageJson = getPackageJson({ processCwd });\n\n  if (packageJson && packageJson.engines) {\n    const { node, ...engines } = packageJson.engines;\n    const packageManagers = Object.keys(engines).filter(\n      (packageManager) => packageManager,\n    );\n\n    if (packageManagers.length >= 1) {\n      return packageManagers[0];\n    }\n  }\n\n  return undefined;\n};\n\nconst getPackageManagerFromProcessEnv = ({\n  processEnv,\n}: {\n  processEnv: NodeJS.ProcessEnv;\n}) => {\n  if (processEnv.npm_execpath) {\n    return processEnv.npm_execpath;\n  }\n\n  const pm = whichPMRuns();\n\n  if (pm) {\n    return pm.name;\n  }\n\n  return undefined;\n};\n\nexport const getPreferredPackageManager = async ({\n  packageManager,\n  processCwd,\n  processEnv,\n}: {\n  packageManager?: string;\n  processCwd: string;\n  processEnv: NodeJS.ProcessEnv;\n}) => {\n  if (packageManager) {\n    return packageManager;\n  }\n\n  const packageManagerFromProcessEnv = getPackageManagerFromProcessEnv({\n    processEnv,\n  });\n\n  if (packageManagerFromProcessEnv) {\n    return packageManagerFromProcessEnv;\n  }\n\n  const pm = await preferredPM(processCwd);\n\n  if (pm) {\n    return pm.name;\n  }\n\n  const packageManagerFromPackageJson = getPackageManagerFromPackageJson({\n    processCwd,\n  });\n\n  if (packageManagerFromPackageJson) {\n    return packageManagerFromPackageJson;\n  }\n\n  return 'npm';\n};\n\nexport const getRunningPackageManager = ({\n  packageManager,\n  processEnv,\n}: {\n  packageManager?: string;\n  processEnv: NodeJS.ProcessEnv;\n}) => {\n  if (packageManager) {\n    return packageManager;\n  }\n\n  const packageManagerFromProcessEnv = getPackageManagerFromProcessEnv({\n    processEnv,\n  });\n\n  if (packageManagerFromProcessEnv) {\n    return packageManagerFromProcessEnv;\n  }\n\n  return 'npm';\n};\n","import fs from 'fs';\nimport path from 'path';\n\nimport dotenv from 'dotenv';\n\nexport const getNodeEnv = ({\n  envFile,\n  processCwd,\n  processEnv,\n}: {\n  envFile?: string;\n  processCwd: string;\n  processEnv: NodeJS.ProcessEnv;\n}) => {\n  if (processEnv.NODE_ENV) {\n    return processEnv.NODE_ENV;\n  }\n\n  if (envFile) {\n    const envPath = path.isAbsolute(envFile)\n      ? path.resolve(envFile)\n      : path.resolve(processCwd, envFile);\n    const envBuffer = fs.readFileSync(envPath);\n    const envConfig = dotenv.parse(envBuffer);\n\n    if (envConfig.NODE_ENV) {\n      return envConfig.NODE_ENV;\n    }\n  }\n\n  return 'development';\n};\n","import { getNodeEnv } from './node-env';\n\nexport const getProcessEnv = ({\n  envFile,\n  processCwd,\n  processEnv,\n}: {\n  envFile?: string;\n  processCwd: string;\n  processEnv: NodeJS.ProcessEnv;\n}): NodeJS.ProcessEnv & { NODE_ENV: string } => {\n  const nodeEnv = getNodeEnv({ envFile, processCwd, processEnv });\n\n  return { ...processEnv, NODE_ENV: nodeEnv };\n};\n","import program from 'commander';\n\nimport { getPackageJson } from './package-json';\n\nexport const getProgram = ({ processArgv }: { processArgv: string[] }) => {\n  program\n    .allowUnknownOption()\n    .option('-e, --env-file <path>', 'specify path to .env file')\n    .option(\n      '-p, --package-manager <pm>',\n      'specify package manager to run script',\n    );\n\n  const packageJson = getPackageJson({ processCwd: __dirname });\n\n  if (packageJson) {\n    if (packageJson.description) {\n      program.description(packageJson.description);\n    }\n\n    program.version(packageJson.version);\n  }\n\n  program.parse(processArgv);\n\n  return program;\n};\n","import { CommanderStatic } from 'commander';\nimport getRemainingArgs from 'commander-remaining-args';\n\nexport const getRemainingArgv = ({\n  program,\n  remainingArgv,\n}: {\n  program?: CommanderStatic;\n  remainingArgv?: string[];\n}) => {\n  if (remainingArgv) {\n    return remainingArgv;\n  }\n\n  if (program) {\n    return getRemainingArgs(program);\n  }\n\n  return [];\n};\n","export const getRunScript = ({\n  processEnv,\n  runScript,\n}: {\n  processEnv: NodeJS.ProcessEnv;\n  runScript?: string;\n}) => {\n  if (runScript) {\n    return runScript;\n  }\n\n  if (processEnv.npm_lifecycle_event) {\n    return processEnv.npm_lifecycle_event;\n  }\n\n  return 'start';\n};\n","#!/usr/bin/env node\n\nimport execa from 'execa';\n\nimport {\n  getPreferredPackageManager,\n  getRunningPackageManager,\n} from './package-manager';\nimport { getProcessEnv } from './process-env';\nimport { getProgram } from './program';\nimport { getRemainingArgv } from './remaining-argv';\nimport { getRunScript } from './run-script';\n\nconst byNodeEnv = ({\n  packageManager,\n  processEnv,\n  remainingArgv,\n  runScript,\n}: {\n  packageManager: string;\n  processEnv: ReturnType<typeof getProcessEnv>;\n  remainingArgv: string[];\n  runScript: string;\n}) => {\n  const command = packageManager;\n  const args = ['run', `${runScript}:${processEnv.NODE_ENV}`, ...remainingArgv];\n  const options: execa.SyncOptions = { env: processEnv, stdio: 'inherit' };\n\n  execa.sync(command, args, options);\n};\n\nif (require.main === module || !module.parent) {\n  const processArgv = process.argv;\n  const processCwd = process.cwd();\n  const processEnv = process.env;\n\n  const program = getProgram({ processArgv });\n  const { envFile, packageManager } = program;\n\n  byNodeEnv({\n    packageManager: getRunningPackageManager({ packageManager, processEnv }),\n    processEnv: getProcessEnv({ envFile, processCwd, processEnv }),\n    remainingArgv: getRemainingArgv({ program }),\n    runScript: getRunScript({ processEnv }),\n  });\n}\n\nexport default ({\n  envFile,\n  packageManager,\n  processCwd = process.cwd(),\n  processEnv = process.env,\n  remainingArgv,\n  runScript,\n}: {\n  envFile?: string;\n  packageManager?: string;\n  processCwd?: string;\n  processEnv?: NodeJS.ProcessEnv;\n  remainingArgv?: string[];\n  runScript?: string;\n} = {}) => {\n  getPreferredPackageManager({ packageManager, processCwd, processEnv }).then(\n    (preferredPackageManager) => {\n      byNodeEnv({\n        packageManager: preferredPackageManager,\n        processEnv: getProcessEnv({ envFile, processCwd, processEnv }),\n        remainingArgv: getRemainingArgv({ remainingArgv }),\n        runScript: getRunScript({ processEnv, runScript }),\n      });\n    },\n  );\n};\n"],"names":["const","getPackageJson","packageJson","readPkgUp","sync","cwd","processCwd","package","undefined","getPackageManagerFromPackageJson","engines","packageManagers","Object","keys","filter","packageManager","length","getPackageManagerFromProcessEnv","processEnv","npm_execpath","pm","whichPMRuns","name","getPreferredPackageManager","packageManagerFromProcessEnv","preferredPM","packageManagerFromPackageJson","getRunningPackageManager","getNodeEnv","NODE_ENV","envFile","envPath","path","isAbsolute","resolve","envBuffer","fs","readFileSync","envConfig","dotenv","parse","getProcessEnv","nodeEnv","getProgram","program","allowUnknownOption","option","__dirname","description","version","processArgv","getRemainingArgv","remainingArgv","getRemainingArgs","getRunScript","runScript","npm_lifecycle_event","byNodeEnv","command","args","options","env","stdio","execa","require","main","module","parent","process","argv","then","preferredPackageManager"],"mappings":"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"}