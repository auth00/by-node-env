{"version":3,"file":"index.umd.js","sources":["../src/package-json.ts","../src/package-manager.ts","../src/node-env.ts","../src/process-env.ts","../src/program.ts","../src/remaining-argv.ts","../src/run-script.ts","../src/index.ts"],"sourcesContent":["import readPkgUp from 'read-pkg-up';\n\nexport const getPackageJson = ({ processCwd }: { processCwd: string }) => {\n  const packageJson = readPkgUp.sync({ cwd: processCwd });\n\n  if (packageJson) {\n    return packageJson.package;\n  }\n\n  return undefined;\n};\n","import preferredPM from 'preferred-pm';\nimport whichPMRuns from 'which-pm-runs';\n\nimport { getPackageJson } from './package-json';\n\nconst getPackageManagerFromPackageJson = ({\n  processCwd,\n}: {\n  processCwd: string;\n}) => {\n  const packageJson = getPackageJson({ processCwd });\n\n  if (packageJson && packageJson.engines) {\n    const { node, ...engines } = packageJson.engines;\n    const packageManagers = Object.keys(engines).filter(\n      (packageManager) => packageManager,\n    );\n\n    if (packageManagers.length >= 1) {\n      return packageManagers[0];\n    }\n  }\n\n  return undefined;\n};\n\nconst getPackageManagerFromProcessEnv = ({\n  processEnv,\n}: {\n  processEnv: NodeJS.ProcessEnv;\n}) => {\n  if (processEnv.npm_execpath) {\n    return processEnv.npm_execpath;\n  }\n\n  const pm = whichPMRuns();\n\n  if (pm) {\n    return pm.name;\n  }\n\n  return undefined;\n};\n\nexport const getPreferredPackageManager = async ({\n  packageManager,\n  processCwd,\n  processEnv,\n}: {\n  packageManager?: string;\n  processCwd: string;\n  processEnv: NodeJS.ProcessEnv;\n}) => {\n  if (packageManager) {\n    return packageManager;\n  }\n\n  const packageManagerFromProcessEnv = getPackageManagerFromProcessEnv({\n    processEnv,\n  });\n\n  if (packageManagerFromProcessEnv) {\n    return packageManagerFromProcessEnv;\n  }\n\n  const pm = await preferredPM(processCwd);\n\n  if (pm) {\n    return pm.name;\n  }\n\n  const packageManagerFromPackageJson = getPackageManagerFromPackageJson({\n    processCwd,\n  });\n\n  if (packageManagerFromPackageJson) {\n    return packageManagerFromPackageJson;\n  }\n\n  return 'npm';\n};\n\nexport const getRunningPackageManager = ({\n  packageManager,\n  processEnv,\n}: {\n  packageManager?: string;\n  processEnv: NodeJS.ProcessEnv;\n}) => {\n  if (packageManager) {\n    return packageManager;\n  }\n\n  const packageManagerFromProcessEnv = getPackageManagerFromProcessEnv({\n    processEnv,\n  });\n\n  if (packageManagerFromProcessEnv) {\n    return packageManagerFromProcessEnv;\n  }\n\n  return 'npm';\n};\n","import fs from 'fs';\nimport path from 'path';\n\nimport dotenv from 'dotenv';\n\nexport const getNodeEnv = ({\n  envFile,\n  processCwd,\n  processEnv,\n}: {\n  envFile?: string;\n  processCwd: string;\n  processEnv: NodeJS.ProcessEnv;\n}) => {\n  if (processEnv.NODE_ENV) {\n    return processEnv.NODE_ENV;\n  }\n\n  if (envFile) {\n    const envPath = path.isAbsolute(envFile)\n      ? path.resolve(envFile)\n      : path.resolve(processCwd, envFile);\n    const envBuffer = fs.readFileSync(envPath);\n    const envConfig = dotenv.parse(envBuffer);\n\n    if (envConfig.NODE_ENV) {\n      return envConfig.NODE_ENV;\n    }\n  }\n\n  return 'development';\n};\n","import { getNodeEnv } from './node-env';\n\nexport const getProcessEnv = ({\n  envFile,\n  processCwd,\n  processEnv,\n}: {\n  envFile?: string;\n  processCwd: string;\n  processEnv: NodeJS.ProcessEnv;\n}): NodeJS.ProcessEnv & { NODE_ENV: string } => {\n  const nodeEnv = getNodeEnv({ envFile, processCwd, processEnv });\n\n  return { ...processEnv, NODE_ENV: nodeEnv };\n};\n","import program from 'commander';\n\nimport { getPackageJson } from './package-json';\n\nexport const getProgram = ({ processArgv }: { processArgv: string[] }) => {\n  program\n    .allowUnknownOption()\n    .option('-e, --env-file <path>', 'specify path to .env file')\n    .option(\n      '-p, --package-manager <pm>',\n      'specify package manager to run script',\n    );\n\n  const packageJson = getPackageJson({ processCwd: __dirname });\n\n  if (packageJson) {\n    if (packageJson.description) {\n      program.description(packageJson.description);\n    }\n\n    program.version(packageJson.version);\n  }\n\n  program.parse(processArgv);\n\n  return program;\n};\n","import { CommanderStatic } from 'commander';\nimport getRemainingArgs from 'commander-remaining-args';\n\nexport const getRemainingArgv = ({\n  program,\n  remainingArgv,\n}: {\n  program?: CommanderStatic;\n  remainingArgv?: string[];\n}) => {\n  if (remainingArgv) {\n    return remainingArgv;\n  }\n\n  if (program) {\n    return getRemainingArgs(program);\n  }\n\n  return [];\n};\n","export const getRunScript = ({\n  processEnv,\n  runScript,\n}: {\n  processEnv: NodeJS.ProcessEnv;\n  runScript?: string;\n}) => {\n  if (runScript) {\n    return runScript;\n  }\n\n  if (processEnv.npm_lifecycle_event) {\n    return processEnv.npm_lifecycle_event;\n  }\n\n  return 'start';\n};\n","#!/usr/bin/env node\n\nimport execa from 'execa';\n\nimport {\n  getPreferredPackageManager,\n  getRunningPackageManager,\n} from './package-manager';\nimport { getProcessEnv } from './process-env';\nimport { getProgram } from './program';\nimport { getRemainingArgv } from './remaining-argv';\nimport { getRunScript } from './run-script';\n\nconst byNodeEnv = ({\n  packageManager,\n  processEnv,\n  remainingArgv,\n  runScript,\n}: {\n  packageManager: string;\n  processEnv: ReturnType<typeof getProcessEnv>;\n  remainingArgv: string[];\n  runScript: string;\n}) => {\n  const command = packageManager;\n  const args = ['run', `${runScript}:${processEnv.NODE_ENV}`, ...remainingArgv];\n  const options: execa.SyncOptions = { env: processEnv, stdio: 'inherit' };\n\n  execa.sync(command, args, options);\n};\n\nif (require.main === module || !module.parent) {\n  const processArgv = process.argv;\n  const processCwd = process.cwd();\n  const processEnv = process.env;\n\n  const program = getProgram({ processArgv });\n  const { envFile, packageManager } = program;\n\n  byNodeEnv({\n    packageManager: getRunningPackageManager({ packageManager, processEnv }),\n    processEnv: getProcessEnv({ envFile, processCwd, processEnv }),\n    remainingArgv: getRemainingArgv({ program }),\n    runScript: getRunScript({ processEnv }),\n  });\n}\n\nexport default ({\n  envFile,\n  packageManager,\n  processCwd = process.cwd(),\n  processEnv = process.env,\n  remainingArgv,\n  runScript,\n}: {\n  envFile?: string;\n  packageManager?: string;\n  processCwd?: string;\n  processEnv?: NodeJS.ProcessEnv;\n  remainingArgv?: string[];\n  runScript?: string;\n} = {}) => {\n  getPreferredPackageManager({ packageManager, processCwd, processEnv }).then(\n    (preferredPackageManager) => {\n      byNodeEnv({\n        packageManager: preferredPackageManager,\n        processEnv: getProcessEnv({ envFile, processCwd, processEnv }),\n        remainingArgv: getRemainingArgv({ remainingArgv }),\n        runScript: getRunScript({ processEnv, runScript }),\n      });\n    },\n  );\n};\n"],"names":["const","getPackageJson","packageJson","readPkgUp","sync","cwd","processCwd","package","undefined","getPackageManagerFromPackageJson","engines","packageManagers","Object","keys","filter","packageManager","length","getPackageManagerFromProcessEnv","processEnv","npm_execpath","pm","whichPMRuns","name","getPreferredPackageManager","packageManagerFromProcessEnv","preferredPM","packageManagerFromPackageJson","getRunningPackageManager","getNodeEnv","NODE_ENV","envFile","envPath","path","isAbsolute","resolve","envBuffer","fs","readFileSync","envConfig","dotenv","parse","getProcessEnv","nodeEnv","getProgram","program","allowUnknownOption","option","__dirname","description","version","processArgv","getRemainingArgv","remainingArgv","getRemainingArgs","getRunScript","runScript","npm_lifecycle_event","byNodeEnv","command","args","options","env","stdio","execa","require","main","module","parent","process","argv","then","preferredPackageManager"],"mappings":"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"}